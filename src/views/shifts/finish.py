from collections.abc import Iterable

from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InputMediaPhoto,
    KeyboardButton,
    ReplyKeyboardMarkup,
)
from aiogram.utils.media_group import MediaType

from callback_data.prefixes import CallbackDataPrefix
from models import ShiftFinishResult
from ui.markups import create_accept_reject_markup
from views.base import MediaGroupView, TextView, PhotoView
from views.button_texts import ButtonText

__all__ = (
    'ShiftFinishConfirmView',
    'StaffShiftFinishedView',
    'ShiftFinishPhotosView',
    'ShiftFinishedWithPhotosView',
    'ShiftFinishPhotoConfirmView',
    'ShiftFinishConfirmAllView',
    'StaffFirstShiftFinishedView',
    'ShiftFinishedWithoutPhotosView',
    'format_shift_finish_text',
)


class ShiftFinishConfirmView(TextView):
    text = '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–º–µ–Ω—ã?'
    reply_markup = create_accept_reject_markup(
        accept_callback_data=CallbackDataPrefix.SHIFT_FINISH_FLOW_START_ACCEPT,
        reject_callback_data=CallbackDataPrefix.SHIFT_FINISH_FLOW_START_REJECT,
    )


class ShiftFinishPhotoConfirmView(PhotoView):
    caption = (
        '‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø—Ä–∏–Ω—è—Ç–∞\n'
        '–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë —Ñ–æ—Ç–æ'
    )

    def __init__(self, photo_file_id: str):
        self.__photo_file_id = photo_file_id

    def get_photo(self) -> str:
        return self.__photo_file_id

    def get_reply_markup(self) -> InlineKeyboardMarkup:
        photo_delete_button = InlineKeyboardButton(
            text='‚ùå –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ',
            callback_data=CallbackDataPrefix.SHIFT_FINISH_PHOTO_DELETE,
        )
        next_step_button = InlineKeyboardButton(
            text='üîú –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥',
            callback_data=CallbackDataPrefix.SHIFT_FINISH_PHOTO_NEXT_STEP,
        )
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [photo_delete_button],
                [next_step_button],
            ],
        )


class ShiftFinishPhotosView(MediaGroupView):
    caption = '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö'

    def __init__(self, photo_file_ids: Iterable[str]):
        self.__photo_file_ids = tuple(photo_file_ids)

    def get_medias(self) -> list[MediaType]:
        return [
            InputMediaPhoto(
                media=photo_file_id,
            )
            for photo_file_id in self.__photo_file_ids
        ]


class ShiftFinishConfirmAllView(TextView):
    text = '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–º–µ–Ω—ã?'
    reply_markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
                    callback_data=CallbackDataPrefix.SHIFT_FINISH_ACCEPT,
                ),
                InlineKeyboardButton(
                    text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å',
                    callback_data=CallbackDataPrefix.SHIFT_FINISH_REJECT,
                )
            ],
        ],
    )


def format_shift_finish_text(shift_summary: ShiftFinishResult) -> str:
    lines: list[str] = [
        f'–ü–µ—Ä–µ–≥–æ–Ω—â–∏–∫: {shift_summary.staff_full_name}',
        f'–ú–æ–π–∫–∞: {shift_summary.car_wash_name or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}',
        f'–í—Å–µ–≥–æ: {shift_summary.total_cars_count}',
        f'–ü–ª–∞–Ω–æ–≤–∞—è –º–æ–π–∫–∞: {shift_summary.planned_cars_count}',
        f'üî∂ –≠–∫–æ–Ω–æ–º: {shift_summary.planned_cars_count}',
        f'üî∂ –ë–∏–∑–Ω–µ—Å: {shift_summary.business_cars_count}',
        f'üî∂ –§—É—Ä–≥–æ–Ω: {shift_summary.vans_count}',
        f'–°—Ä–æ—á–Ω–∞—è –º–æ–π–∫–∞: {shift_summary.urgent_cars_count}',
        f'–•–∏–º—á–∏—Å—Ç–∫–∏: {shift_summary.dry_cleaning_count}',
        f'–î–æ–ª–∏–≤: {shift_summary.refilled_cars_count}',
        f'–ù–µ–¥–æ–ª–∏–≤: {shift_summary.not_refilled_cars_count}',
    ]

    if shift_summary.car_numbers:
        lines.append('üöó –°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–∞—à–∏–Ω:')

    for car_number in shift_summary.car_numbers:
        lines.append(car_number)

    return '\n'.join(lines)


class ShiftFinishedWithoutPhotosView(TextView):

    def __init__(self, shift_finish_result: ShiftFinishResult):
        self.__shift_summary = shift_finish_result

    def get_text(self) -> str:
        return format_shift_finish_text(self.__shift_summary)


class ShiftFinishedWithPhotosView(MediaGroupView):

    def __init__(self, shift_finish_result: ShiftFinishResult):
        self.__shift_summary = shift_finish_result

    def get_medias(self) -> list[MediaType] | None:
        return [
            InputMediaPhoto(media=photo_file_id)
            for photo_file_id in self.__shift_summary.finish_photo_file_ids
        ]

    def get_caption(self) -> str:
        return format_shift_finish_text(self.__shift_summary)


class StaffFirstShiftFinishedView(TextView):
    text = (
        '–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É! –ó–∞–ø–æ–ª–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã.'
        ' –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã" –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ'
        ' "–°–¥–µ–ª–∞—é —ç—Ç–æ –ø–æ–∑–∂–µ", –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –ø–æ–∑–∂–µ.'
    )
    reply_markup = ReplyKeyboardMarkup(
        resize_keyboard=True,
        keyboard=[
            [
                KeyboardButton(text=ButtonText.SHIFT_SCHEDULE),
                KeyboardButton(text=ButtonText.LATER)
            ],
        ],
    )


class StaffShiftFinishedView(TextView):
    text = (
        '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—Å–µ –æ—Ç—á–µ—Ç—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –≤–µ—Ä–Ω–æ!'
        ' –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É –∏ —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!'
    )
