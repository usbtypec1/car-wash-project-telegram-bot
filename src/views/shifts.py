from collections.abc import Iterable

from aiogram.types import (
    InlineKeyboardButton, InlineKeyboardMarkup,
    KeyboardButton, ReplyKeyboardMarkup, WebAppInfo,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder

from callback_data import (
    CarClassChoiceCallbackData,
    ShiftWorkTypeChoiceCallbackData, WashTypeChoiceCallbackData,
    WindshieldWasherRefilledValueCallbackData,
)
from callback_data.prefixes import CallbackDataPrefix
from callback_data.shifts import ShiftCarWashUpdateCallbackData
from enums import CarClass, ShiftWorkType, WashType
from models import (
    CarWash, ShiftCarsCountByStaff,
    ShiftCarsWithoutWindshieldWasher,
)
from views.base import TextView

__all__ = (
    'ShiftWorkTypeChoiceView',
    'shift_work_types_and_names',
    'CarNumberInputView',
    'CarClassInputView',
    'WashTypeInputView',
    'WindshieldWasherRefilledInputView',
    'WindshieldWasherRefilledValueInputView',
    'AdditionalServicesIncludedInputView',
    'AddCarWithoutAdditionalServicesConfirmView',
    'ShiftApplyWebAppView',
    'ShiftStartRequestView',
    'ShiftCarsCountByStaffView',
    'ShiftCarsWithoutWindshieldWasherView',
    'ShiftCarWashUpdateView',
    'ShiftFinishConfirmView',
)

shift_work_types_and_names: tuple[tuple[ShiftWorkType, str], ...] = (
    (ShiftWorkType.MOVE_TO_WASH, '–ü–µ—Ä–µ–≥–æ–Ω –¢–° –Ω–∞ –º–æ–π–∫—É'),
    (ShiftWorkType.LIGHT_WASHES, '–õ–µ–≥–∫–∏–µ –º–æ–π–∫–∏'),
    (ShiftWorkType.FIND_VEHICLE_IN_CITY, '–ü–æ–∏—Å–∫ –¢–° –≤ –≥–æ—Ä–æ–¥–µ'),
    (ShiftWorkType.ASSIGNMENT_MOVE, '–ü–µ—Ä–µ–≥–æ–Ω –ø–æ –∑–∞–¥–∞–Ω–∏—é'),
)


class ShiftWorkTypeChoiceView(TextView):
    text = '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Å–º–µ–Ω—É:'
    reply_markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=shift_work_type_name,
                    callback_data=ShiftWorkTypeChoiceCallbackData(
                        work_type=shift_work_type,
                    ).pack(),
                )
            ]
            for shift_work_type, shift_work_type_name in
            shift_work_types_and_names
        ]
    )


class CarClassInputView(TextView):
    text = (
        '–£–∫–∞–∂–∏—Ç–µ –∫–∞–∫–æ–º—É –∫–ª–∞—Å—Å—É –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—å\n'
        '<blockquote expandable>'
        '–ö–æ–º—Ñ–æ—Ä—Ç-–∫–ª–∞—Å—Å: Volkswagen polo 6, skoda rapid 2,'
        ' chery tiggo 4, chery tiggo 4 pro, chery tiggo 7 pro ,'
        ' geely atlas pro, exeed lx, geely coolray, geely coolray flagship,'
        ' moskvich m3, nissan qashqai, renault duster, geely belgee x50'
        '\n–ë–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å: audi a6, haval Jolion, Mercedes e200, Tank 300,'
        ' Tank 500, bmw 520d'
        '\n–§—É—Ä–≥–æ–Ω—ã –∏ –º–∏–∫—Ä–æ–∞–≤—Ç–æ–±—É—Å—ã: ford transit, sollers atlant'
        '</blockquote>'
    )
    reply_markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text='–ö–æ–º—Ñ–æ—Ä—Ç',
                    callback_data=CarClassChoiceCallbackData(
                        car_class=CarClass.COMFORT,
                    ).pack(),
                ),
                InlineKeyboardButton(
                    text='–ë–∏–∑–Ω–µ—Å',
                    callback_data=CarClassChoiceCallbackData(
                        car_class=CarClass.BUSINESS,
                    ).pack(),
                ),
                InlineKeyboardButton(
                    text='–§—É—Ä–≥–æ–Ω',
                    callback_data=CarClassChoiceCallbackData(
                        car_class=CarClass.VAN,
                    ).pack(),
                ),
            ],
            [
                InlineKeyboardButton(
                    text='üîô –ù–∞–∑–∞–¥',
                    callback_data=CallbackDataPrefix.CAR_NUMBER,
                )
            ]
        ]
    )


class CarNumberInputView(TextView):
    text = '–£–∫–∞–∂–∏—Ç–µ –≥–æ—Å –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∞111–∞–∞799'


class WashTypeInputView(TextView):
    text = '–í–∏–¥ –º–æ–π–∫–∏'
    reply_markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text='–ü–ª–∞–Ω–æ–≤–∞—è',
                    callback_data=WashTypeChoiceCallbackData(
                        wash_type=WashType.PLANNED,
                    ).pack(),
                ),
                InlineKeyboardButton(
                    text='–°—Ä–æ—á–Ω–∞—è',
                    callback_data=WashTypeChoiceCallbackData(
                        wash_type=WashType.URGENT,
                    ).pack(),
                ),
            ],
        ],
    )


class WindshieldWasherRefilledInputView(TextView):
    text = '–û—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω –¥–æ–ª–∏–≤ —Å—Ç–µ–∫–ª–æ–æ–º—ã–≤–∞—Ç–µ–ª—è?'
    reply_markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text='–î–∞',
                    callback_data=(
                        CallbackDataPrefix.WINDSHIELD_WASHER_REFILLED_VALUE
                    ),
                ),
                InlineKeyboardButton(
                    text='–ù–µ—Ç',
                    callback_data=WindshieldWasherRefilledValueCallbackData(
                        value=None,
                    ).pack(),
                ),
            ]
        ]
    )


windshield_washer_refilled_values: tuple[int, ...] = (
    10, 20, 30, 50, 70, 90, 100, 120,
)


class WindshieldWasherRefilledValueInputView(TextView):
    text = '–°–∫–æ–ª—å–∫–æ % –æ—Ç –±—É—Ç—ã–ª–∫–∏ –±—ã–ª–æ –∑–∞–ª–∏—Ç–æ?'

    def get_reply_markup(self) -> InlineKeyboardMarkup:
        keyboard = InlineKeyboardBuilder()
        keyboard.max_width = 2
        for value in windshield_washer_refilled_values:
            keyboard.button(
                text=f'{value}%',
                callback_data=WindshieldWasherRefilledValueCallbackData(
                    value=value,
                ).pack()
            )
        return keyboard.as_markup()


class AdditionalServicesIncludedInputView(TextView):
    text = '–î–æ–±–∞–≤–∏—Ç—å –¥–æ–ø —É—Å–ª—É–≥–∏?'
    reply_markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text='–î–∞',
                    callback_data=(
                        CallbackDataPrefix.ADDITIONAL_SERVICES_INCLUDED
                    ),
                ),
                InlineKeyboardButton(
                    text='–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ',
                    callback_data=CallbackDataPrefix.ADD_CAR_CONFIRM,
                ),
            ],
        ],
    )


class AddCarWithoutAdditionalServicesConfirmView(TextView):

    def __init__(self, car_number: str):
        self.__car_number = car_number

    def get_text(self) -> str:
        return (
            f'–ê–≤—Ç–æ–º–æ–±–∏–ª—å {self.__car_number} –∑–∞–ø–∏—Å–∞–Ω.'
            ' –î–æ–±–∞–≤–∏—Ç—å –¥–æ–ø —É—Å–ª—É–≥–∏ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å'
            ' –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–∑–∂–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é'
        )


class ShiftStartRequestView(TextView):
    text = '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã—Ö–æ–¥ –Ω–∞ —Å–º–µ–Ω—É'
    reply_markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
                    callback_data=CallbackDataPrefix.SHIFT_OWN,
                ),
                InlineKeyboardButton(
                    text='–û—Ç–∫–ª–æ–Ω–∏—Ç—å',
                    callback_data=CallbackDataPrefix.SHIFT_OWN,
                ),
            ],
        ],
    )


class ShiftApplyWebAppView(TextView):
    text = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—ã –¥–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞ —Å–º–µ–Ω—ã'

    def __init__(self, web_app_base_url: str):
        self.__web_app_url = web_app_base_url

    def get_reply_markup(self) -> ReplyKeyboardMarkup:
        web_app_button = KeyboardButton(
            text='üìÜ –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—ã',
            web_app=WebAppInfo(
                url=f'{self.__web_app_url}/shifts/apply',
            ),
        )
        return ReplyKeyboardMarkup(
            resize_keyboard=True,
            keyboard=[[web_app_button]],
        )


class ShiftCarsCountByStaffView(TextView):

    def __init__(self, shift_cars: ShiftCarsCountByStaff):
        self.__shift_cars = shift_cars

    def get_text(self) -> str:
        lines: list[str] = [
            f'<b>–°–º–µ–Ω–∞ {self.__shift_cars.date:%d.%m.%Y}</b>',
        ]
        if not self.__shift_cars.cars:
            lines.append('–ü–æ–∫–∞ –Ω–µ—Ç –≤–Ω–µ—Å–µ–Ω–Ω—ã—Ö –∞–≤—Ç–æ')
        for position, item in enumerate(
                self.__shift_cars.cars,
                start=1,
        ):
            lines.append(
                f'{position}. {item.staff_full_name} - {item.cars_count} –∞–≤—Ç–æ'
            )

        return '\n'.join(lines)


class ShiftCarsWithoutWindshieldWasherView(TextView):

    def __init__(self, shift_cars: ShiftCarsWithoutWindshieldWasher):
        self.__shift_cars = shift_cars

    def get_text(self) -> str:
        lines: list[str] = [
            f'<b>–°–º–µ–Ω–∞ {self.__shift_cars.date:%d.%m.%Y}</b>',
        ]
        if not self.__shift_cars.cars:
            lines.append('–ü–æ–∫–∞ –Ω–µ—Ç –∞–≤—Ç–æ —Å –Ω–µ–¥–æ–ª–∏–≤–∞–º–∏')
        for car_number in self.__shift_cars.cars:
            lines.append(car_number)

        return '\n'.join(lines)


class ShiftCarWashUpdateView(TextView):
    text = '–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–π–∫—É'

    def __init__(self, car_washes: Iterable[CarWash]):
        self.__car_washes = tuple(car_washes)

    def get_reply_markup(self) -> InlineKeyboardMarkup:
        keyboard = InlineKeyboardBuilder()
        keyboard.max_width = 1

        for car_wash in self.__car_washes:
            keyboard.button(
                text=car_wash.name,
                callback_data=ShiftCarWashUpdateCallbackData(
                    car_wash_id=car_wash.id,
                ),
            )

        return keyboard.as_markup()


class ShiftFinishConfirmView(TextView):
    text = '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–º–µ–Ω—ã?'
    reply_markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text='‚úÖ –î–∞',
                    callback_data=CallbackDataPrefix.SHIFT_FINISH_ACCEPT,
                ),
                InlineKeyboardButton(
                    text='‚ùå –ù–µ—Ç',
                    callback_data=CallbackDataPrefix.SHIFT_FINISH_REJECT,
                ),
            ],
        ],
    )
