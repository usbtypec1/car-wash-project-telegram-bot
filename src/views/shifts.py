import datetime
from collections.abc import Iterable
from typing import Final
from zoneinfo import ZoneInfo

from aiogram.types import (
    InlineKeyboardButton, InlineKeyboardMarkup,
    InputMediaPhoto, KeyboardButton, ReplyKeyboardMarkup, WebAppInfo,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.utils.media_group import MediaType

from callback_data import (
    ExtraShiftCreateAcceptCallbackData,
    ExtraShiftCreateRejectCallbackData,
    ExtraShiftStartCallbackData,
    ShiftApplyCallbackData,
    ShiftImmediateStartCallbackData, ShiftRejectCallbackData,
    ShiftStartCallbackData,
    ShiftStartCarWashCallbackData,
    ShiftStartRequestAcceptCallbackData,
    ShiftStartRequestRejectCallbackData,
    ShiftWorkTypeChoiceCallbackData,
)
from callback_data.prefixes import CallbackDataPrefix
from callback_data.shifts import ShiftCarWashUpdateCallbackData
from enums import ShiftWorkType
from models import (
    AvailableDate, CarWash,
    ShiftCarsCountByStaff,
    ShiftCarsWithoutWindshieldWasher,
    ShiftFinishResult, ShiftListItem, Staff,
)
from views.base import MediaGroupView, TextView
from views.button_texts import ButtonText

__all__ = (
    'ShiftWorkTypeChoiceView',
    'shift_work_types_and_names',
    'ShiftCarsCountByStaffView',
    'ShiftCarsWithoutWindshieldWasherView',
    'ShiftCarWashUpdateView',
    'ShiftFinishConfirmView',
    'ShiftFinishPhotoConfirmView',
    'ShiftFinishConfirmAllView',
    'ShiftFinishPhotosView',
    'StaffShiftFinishedNotificationView',
    'StaffShiftFinishedView',
    'StaffFirstShiftFinishedView',
    'ShiftStartConfirmView',
    'ShiftStartCarWashChooseView',
    'ShiftApplyChooseMonthView',
    'ShiftApplyScheduleMonthCalendarWebAppView',
    'StaffShiftScheduleCreatedNotificationView',
    'StaffHasNoAnyCreatedShiftView',
    'StaffScheduleCreatedShiftView',
    'ExtraShiftScheduleWebAppView',
    'ExtraShiftScheduleNotificationView',
    'ExtraShiftStartView',
    'ShiftStartRequestView',
    'ShiftImmediateStartRequestView',
)

shift_work_types_and_names: tuple[tuple[ShiftWorkType, str], ...] = (
    (ShiftWorkType.MOVE_TO_WASH, '–ü–µ—Ä–µ–≥–æ–Ω –¢–° –Ω–∞ –º–æ–π–∫—É'),
    (ShiftWorkType.LIGHT_WASHES, '–õ–µ–≥–∫–∏–µ –º–æ–π–∫–∏'),
    (ShiftWorkType.FIND_VEHICLE_IN_CITY, '–ü–æ–∏—Å–∫ –¢–° –≤ –≥–æ—Ä–æ–¥–µ'),
    (ShiftWorkType.ASSIGNMENT_MOVE, '–ü–µ—Ä–µ–≥–æ–Ω –ø–æ –∑–∞–¥–∞–Ω–∏—é'),
)


class ShiftWorkTypeChoiceView(TextView):
    text = '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Å–º–µ–Ω—É:'
    reply_markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=shift_work_type_name,
                    callback_data=ShiftWorkTypeChoiceCallbackData(
                        work_type=shift_work_type,
                    ).pack(),
                )
            ]
            for shift_work_type, shift_work_type_name in
            shift_work_types_and_names
        ]
    )


month_names: Final[tuple[str, ...]] = (
    '—è–Ω–≤–∞—Ä—å',
    '—Ñ–µ–≤—Ä–∞–ª—å',
    '–º–∞—Ä—Ç',
    '–∞–ø—Ä–µ–ª—å',
    '–º–∞–π',
    '–∏—é–Ω—å',
    '–∏—é–ª—å',
    '–∞–≤–≥—É—Å—Ç',
    '—Å–µ–Ω—Ç—è–±—Ä—å',
    '–æ–∫—Ç—è–±—Ä—å',
    '–Ω–æ—è–±—Ä—å',
    '–¥–µ–∫–∞–±—Ä—å',
)


class ShiftCarsCountByStaffView(TextView):

    def __init__(self, shift_cars: ShiftCarsCountByStaff):
        self.__shift_cars = shift_cars

    def get_text(self) -> str:
        lines: list[str] = [
            f'<b>–°–º–µ–Ω–∞ {self.__shift_cars.date:%d.%m.%Y}</b>',
        ]
        if not self.__shift_cars.cars:
            lines.append('–ü–æ–∫–∞ –Ω–µ—Ç –≤–Ω–µ—Å–µ–Ω–Ω—ã—Ö –∞–≤—Ç–æ')
        for position, item in enumerate(
                self.__shift_cars.cars,
                start=1,
        ):
            lines.append(
                f'{position}. {item.staff_full_name} - {item.cars_count} –∞–≤—Ç–æ'
            )

        return '\n'.join(lines)


class ShiftCarsWithoutWindshieldWasherView(TextView):

    def __init__(self, shift_cars: ShiftCarsWithoutWindshieldWasher):
        self.__shift_cars = shift_cars

    def get_text(self) -> str:
        lines: list[str] = [
            f'<b>–°–º–µ–Ω–∞ {self.__shift_cars.date:%d.%m.%Y}</b>',
        ]
        if not self.__shift_cars.cars:
            lines.append('–ü–æ–∫–∞ –Ω–µ—Ç –∞–≤—Ç–æ —Å –Ω–µ–¥–æ–ª–∏–≤–∞–º–∏')
        for car_number in self.__shift_cars.cars:
            lines.append(car_number)

        return '\n'.join(lines)


class ShiftCarWashUpdateView(TextView):
    text = '–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–π–∫—É'

    def __init__(self, car_washes: Iterable[CarWash]):
        self.__car_washes = tuple(car_washes)

    def get_reply_markup(self) -> InlineKeyboardMarkup:
        keyboard = InlineKeyboardBuilder()
        keyboard.max_width = 1

        for car_wash in self.__car_washes:
            keyboard.button(
                text=car_wash.name,
                callback_data=ShiftCarWashUpdateCallbackData(
                    car_wash_id=car_wash.id,
                ),
            )

        return keyboard.as_markup()


class ShiftFinishConfirmView(TextView):
    text = '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–º–µ–Ω—ã?'
    reply_markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text='‚úÖ –î–∞',
                    callback_data=CallbackDataPrefix
                    .SHIFT_FINISH_FLOW_START_ACCEPT,
                ),
                InlineKeyboardButton(
                    text='‚ùå –ù–µ—Ç',
                    callback_data=CallbackDataPrefix
                    .SHIFT_FINISH_FLOW_START_REJECT,
                ),
            ],
        ],
    )


class ShiftFinishPhotoConfirmView(TextView):
    text = (
        '‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø—Ä–∏–Ω—è—Ç–∞\n'
        '–ß—Ç–æ–±—ã –∑–∞–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ –Ω–æ–≤–æ–µ'
    )

    def __init__(self, confirm_button_callback_data: str):
        self.__confirm_button_callback_data = confirm_button_callback_data

    def get_reply_markup(self) -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ñ–æ—Ç–æ',
                        callback_data=self.__confirm_button_callback_data,
                    )
                ]
            ]
        )


class ShiftFinishPhotosView(MediaGroupView):
    caption = '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö'

    def __init__(
            self,
            *,
            statement_photo_file_id: str,
            service_app_photo_file_id: str,
    ):
        self.__statement_photo_file_id = statement_photo_file_id
        self.__service_app_photo_file_id = service_app_photo_file_id

    def get_medias(self) -> list[MediaType]:
        return [
            InputMediaPhoto(
                media=self.__statement_photo_file_id,
            ),
            InputMediaPhoto(
                media=self.__service_app_photo_file_id,
            ),
        ]


class ShiftFinishConfirmAllView(TextView):
    text = '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–º–µ–Ω—ã?'
    reply_markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
                    callback_data=CallbackDataPrefix.SHIFT_FINISH_ACCEPT,
                ),
                InlineKeyboardButton(
                    text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å',
                    callback_data=CallbackDataPrefix.SHIFT_FINISH_REJECT,
                )
            ],
        ],
    )


class StaffShiftFinishedNotificationView(MediaGroupView):

    def __init__(
            self,
            shift_finish_result: ShiftFinishResult,
            photo_file_ids: Iterable[str],
    ):
        self.__shift_finish_result = shift_finish_result
        self.__photo_file_ids = tuple(photo_file_ids)

    def get_medias(self) -> list[MediaType] | None:
        return [
            InputMediaPhoto(media=photo_file_id)
            for photo_file_id in self.__photo_file_ids
        ]

    def get_caption(self) -> str:
        lines: list[str] = [
            f'‚ùóÔ∏è –°–æ—Ç—Ä—É–¥–Ω–∏–∫ {self.__shift_finish_result.staff_full_name}'
            f' –∑–∞–≤–µ—Ä—à–∏–ª —Å–º–µ–Ω—É\n',
        ]

        if self.__shift_finish_result.car_numbers:
            lines.append('üöó –°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–∞—à–∏–Ω:')
        else:
            lines.append('–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–∞—à–∏–Ω')
        for car_number in self.__shift_finish_result.car_numbers:
            lines.append(car_number)

        return '\n'.join(lines)


class StaffFirstShiftFinishedView(TextView):
    text = (
        '–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É! –ó–∞–ø–æ–ª–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã.'
        ' –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã" –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ'
        ' "–°–¥–µ–ª–∞—é —ç—Ç–æ –ø–æ–∑–∂–µ", –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –ø–æ–∑–∂–µ.'
    )
    reply_markup = ReplyKeyboardMarkup(
        resize_keyboard=True,
        keyboard=[
            [
                KeyboardButton(text=ButtonText.SHIFT_SCHEDULE),
                KeyboardButton(text=ButtonText.LATER)
            ],
        ],
    )


class StaffShiftFinishedView(TextView):
    text = (
        '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—Å–µ –æ—Ç—á–µ—Ç—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –≤–µ—Ä–Ω–æ!'
        ' –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É –∏ —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!'
    )


class ShiftStartConfirmView(TextView):

    def __init__(self, shift_id: int, staff_full_name: str):
        self.__shift_id = shift_id
        self.__staff_full_name = staff_full_name

    def get_text(self) -> str:
        return f'{self.__staff_full_name} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã—Ö–æ–¥ –Ω–∞ —Å–º–µ–Ω—É'

    def get_reply_markup(self) -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
                        callback_data=ShiftStartCallbackData(
                            shift_id=self.__shift_id,
                        ).pack(),
                    ),
                    InlineKeyboardButton(
                        text='‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å',
                        callback_data=ShiftRejectCallbackData(
                            shift_id=self.__shift_id,
                        ).pack(),
                    ),
                ]
            ]
        )


class ShiftStartCarWashChooseView(TextView):
    text = '–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–π–∫—É'

    def __init__(self, car_washes: Iterable[CarWash]):
        self.__car_washes = tuple(car_washes)

    def get_reply_markup(self) -> InlineKeyboardMarkup:
        keyboard = InlineKeyboardBuilder()
        keyboard.max_width = 1

        for car_wash in self.__car_washes:
            keyboard.button(
                text=car_wash.name,
                callback_data=ShiftStartCarWashCallbackData(
                    car_wash_id=car_wash.id,
                )
            )

        return keyboard.as_markup()


class ShiftApplyChooseMonthView(TextView):

    def __init__(
            self,
            available_dates: Iterable[AvailableDate],
            timezone: ZoneInfo,
    ):
        self.__available_dates = tuple(available_dates)
        self.__timezone = timezone

    def get_text(self) -> str:
        if self.__available_dates:
            return 'üìÜ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü'
        return '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—è—Ü–µ–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–º–µ–Ω—É'

    def get_reply_markup(self) -> InlineKeyboardMarkup:
        keyboard = InlineKeyboardBuilder()
        keyboard.max_width = 1

        now = datetime.datetime.now(self.__timezone)

        for available_date in self.__available_dates:
            month_name = month_names[available_date.month - 1]

            if available_date.year == now.year:
                text = month_name
            else:
                text = f'{month_name} - {available_date.year} –≥–æ–¥'

            keyboard.button(
                text=text.capitalize(),
                callback_data=ShiftApplyCallbackData(
                    month=available_date.month,
                    year=available_date.year,
                ),
            )

        return keyboard.as_markup()


class ShiftApplyScheduleMonthCalendarWebAppView(TextView):

    def __init__(
            self,
            web_app_base_url: str,
            month: int,
            year: int,
    ):
        self.__web_app_base_url = web_app_base_url
        self.__month = month
        self.__year = year

    def get_text(self) -> str:
        month_name = month_names[self.__month - 1]
        return (
            f'üìÜ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—ã –¥–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞ —Å–º–µ–Ω—ã –∑–∞ {month_name}'
            f' {self.__year} –≥–æ–¥–∞'
        )

    def get_reply_markup(self) -> ReplyKeyboardMarkup:
        url = (
            f'{self.__web_app_base_url}/shifts/apply'
            f'?year={self.__year}&month={self.__month}'
        )
        return ReplyKeyboardMarkup(
            resize_keyboard=True,
            keyboard=[
                [
                    KeyboardButton(
                        text=ButtonText.SHIFT_SCHEDULE_MONTH_CALENDAR,
                        web_app=WebAppInfo(url=url)
                    ),
                ],
                [
                    KeyboardButton(text=ButtonText.MAIN_MENU),
                ],
            ],
        )


class StaffShiftScheduleCreatedNotificationView(TextView):

    def __init__(self, staff_full_name: str):
        self.__staff_full_name = staff_full_name

    def get_text(self) -> str:
        return f'–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {self.__staff_full_name} –≤–Ω–µ—Å –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã'


class StaffHasNoAnyCreatedShiftView(TextView):
    text = '‚ùóÔ∏è –í—ã –µ—â–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –≥—Ä–∞—Ñ–∏–∫'
    reply_markup = ReplyKeyboardMarkup(
        resize_keyboard=True,
        keyboard=[
            [
                KeyboardButton(text=ButtonText.SHIFT_APPLY),
            ],
            [
                KeyboardButton(text=ButtonText.MAIN_MENU),
            ],
        ],
    )


class StaffScheduleCreatedShiftView(TextView):

    def __init__(self, shift_dates: Iterable[datetime.date]):
        self.__shift_dates = tuple(shift_dates)

    def get_text(self) -> str:
        lines: list[str] = ['<b>üìÜ –î–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞</b>']

        for i, shift_date in enumerate(self.__shift_dates, start=1):
            lines.append(f'{i}. {shift_date:%d.%m.%Y}')

        return '\n'.join(lines)


class ExtraShiftScheduleWebAppView(TextView):
    text = 'üìÜ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É'

    def __init__(self, web_app_base_url: str):
        self.__web_app_base_url = web_app_base_url

    def get_reply_markup(self) -> ReplyKeyboardMarkup:
        url = f'{self.__web_app_base_url}/shifts/extra'
        return ReplyKeyboardMarkup(
            resize_keyboard=True,
            keyboard=[
                [
                    KeyboardButton(
                        text=ButtonText.EXTRA_SHIFT_CALENDAR,
                        web_app=WebAppInfo(url=url),
                    ),
                ],
                [
                    KeyboardButton(text=ButtonText.MAIN_MENU),
                ],
            ],
        )


class ExtraShiftScheduleNotificationView(TextView):

    def __init__(
            self,
            staff_id: int,
            staff_full_name: str,
            shift_date: datetime.date,
    ):
        self.__staff_id = staff_id
        self.__staff_full_name = staff_full_name
        self.__shift_date = shift_date

    def get_text(self) -> str:
        return (
            f'–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {self.__staff_full_name} –∑–∞–ø—Ä–æ—Å–∏–ª –¥–æ–ø.—Å–º–µ–Ω—É'
            f' –Ω–∞ –¥–∞—Ç—É {self.__shift_date:%d.%m.%Y}'
        )

    def get_reply_markup(self) -> InlineKeyboardMarkup:
        accept_button = InlineKeyboardButton(
            text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
            callback_data=ExtraShiftCreateAcceptCallbackData(
                staff_id=self.__staff_id,
                date=self.__shift_date,
            ).pack(),
        )
        reject_button = InlineKeyboardButton(
            text='‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å',
            callback_data=ExtraShiftCreateRejectCallbackData(
                staff_id=self.__staff_id,
                date=self.__shift_date,
            ).pack(),
        )
        return InlineKeyboardMarkup(
            inline_keyboard=[[accept_button, reject_button]],
        )


class ExtraShiftStartView(TextView):

    def __init__(
            self,
            staff_full_name: str,
            shift_date: datetime.date
    ):
        self.__staff_full_name = staff_full_name
        self.__shift_date = shift_date

    def get_text(self) -> str:
        return (
            f'‚úÖ {self.__staff_full_name}, –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–ø.—Å–º–µ–Ω—É –Ω–∞ –¥–∞—Ç—É'
            f' {self.__shift_date:%d.%m.%Y} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'
        )

    def get_reply_markup(self) -> InlineKeyboardMarkup:
        button = InlineKeyboardButton(
            text='üöÄ –ù–∞—á–∞—Ç—å –¥–æ–ø.—Å–º–µ–Ω—É',
            callback_data=ExtraShiftStartCallbackData(
                date=self.__shift_date,
            ).pack(),
        )
        return InlineKeyboardMarkup(inline_keyboard=[[button]])


class ShiftStartRequestView(TextView):

    def __init__(self, *, staff: Staff, shift: ShiftListItem):
        self.__staff = staff
        self.__shift = shift

    def get_text(self) -> str:
        return (
            f'üìÜ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ {self.__staff.full_name}'
            f' —Ö–æ—á–µ—Ç –Ω–∞—á–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é —Å–º–µ–Ω—É'
        )

    def get_reply_markup(self) -> InlineKeyboardMarkup:
        accept_button = InlineKeyboardButton(
            text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
            callback_data=ShiftStartRequestAcceptCallbackData(
                shift_id=self.__shift.id,
            ).pack(),
        )
        reject_button = InlineKeyboardButton(
            text='‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å',
            callback_data=ShiftStartRequestRejectCallbackData(
                shift_id=self.__shift.id,
            ).pack(),
        )
        return InlineKeyboardMarkup(
            inline_keyboard=[[accept_button, reject_button]],
        )


class ShiftImmediateStartRequestView(TextView):

    def __init__(self, *, date: datetime.date):
        self.__date = date

    def get_text(self) -> str:
        return f'üìÜ –ù–∞—á–Ω–∏—Ç–µ —Å–º–µ–Ω—É –Ω–∞ –¥–∞—Ç—É {self.__date:%d.%m.%Y}'

    def get_reply_markup(self) -> InlineKeyboardMarkup:
        button = InlineKeyboardButton(
            text='üöÄ –ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É',
            callback_data=ShiftImmediateStartCallbackData(
                date=self.__date,
            ).pack()
        )
        return InlineKeyboardMarkup(inline_keyboard=[[button]])
